// source: cs3/ocmshareprovider/v0alpha/resources.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cs3_storageprovider_v0alpha_resources_pb = require('../../../cs3/storageprovider/v0alpha/resources_pb.js');
goog.object.extend(proto, cs3_storageprovider_v0alpha_resources_pb);
var cs3_types_types_pb = require('../../../cs3/types/types_pb.js');
goog.object.extend(proto, cs3_types_types_pb);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ReceivedShare', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.Share', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ShareGrant', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ShareId', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ShareKey', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.SharePermissions', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ShareReference', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ShareReference.SpecCase', null, global);
goog.exportSymbol('proto.cs3.ocmshareproviderv0alpha.ShareState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.Share = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.Share, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.Share.displayName = 'proto.cs3.ocmshareproviderv0alpha.Share';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.SharePermissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.SharePermissions.displayName = 'proto.cs3.ocmshareproviderv0alpha.SharePermissions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.ReceivedShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.ReceivedShare.displayName = 'proto.cs3.ocmshareproviderv0alpha.ReceivedShare';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.ShareKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.ShareKey.displayName = 'proto.cs3.ocmshareproviderv0alpha.ShareKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.ShareId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.ShareId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.ShareId.displayName = 'proto.cs3.ocmshareproviderv0alpha.ShareId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.ocmshareproviderv0alpha.ShareReference.oneofGroups_);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.ShareReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.ShareReference.displayName = 'proto.cs3.ocmshareproviderv0alpha.ShareReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.ocmshareproviderv0alpha.ShareGrant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.ocmshareproviderv0alpha.ShareGrant.displayName = 'proto.cs3.ocmshareproviderv0alpha.ShareGrant';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.Share.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.Share} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.Share.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.cs3.ocmshareproviderv0alpha.ShareId.toObject(includeInstance, f),
    resourceId: (f = msg.getResourceId()) && cs3_storageprovider_v0alpha_resources_pb.ResourceId.toObject(includeInstance, f),
    permissions: (f = msg.getPermissions()) && proto.cs3.ocmshareproviderv0alpha.SharePermissions.toObject(includeInstance, f),
    grantee: (f = msg.getGrantee()) && cs3_storageprovider_v0alpha_resources_pb.Grantee.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && cs3_types_types_pb.UserId.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && cs3_types_types_pb.UserId.toObject(includeInstance, f),
    ctime: (f = msg.getCtime()) && cs3_types_types_pb.Timestamp.toObject(includeInstance, f),
    mtime: (f = msg.getMtime()) && cs3_types_types_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.Share}
 */
proto.cs3.ocmshareproviderv0alpha.Share.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.Share;
  return proto.cs3.ocmshareproviderv0alpha.Share.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.Share} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.Share}
 */
proto.cs3.ocmshareproviderv0alpha.Share.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.ocmshareproviderv0alpha.ShareId;
      reader.readMessage(value,proto.cs3.ocmshareproviderv0alpha.ShareId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourceId;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 3:
      var value = new proto.cs3.ocmshareproviderv0alpha.SharePermissions;
      reader.readMessage(value,proto.cs3.ocmshareproviderv0alpha.SharePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 4:
      var value = new cs3_storageprovider_v0alpha_resources_pb.Grantee;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.Grantee.deserializeBinaryFromReader);
      msg.setGrantee(value);
      break;
    case 5:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 6:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    case 7:
      var value = new cs3_types_types_pb.Timestamp;
      reader.readMessage(value,cs3_types_types_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCtime(value);
      break;
    case 8:
      var value = new cs3_types_types_pb.Timestamp;
      reader.readMessage(value,cs3_types_types_pb.Timestamp.deserializeBinaryFromReader);
      msg.setMtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.Share.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.Share} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.Share.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.ocmshareproviderv0alpha.ShareId.serializeBinaryToWriter
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.ocmshareproviderv0alpha.SharePermissions.serializeBinaryToWriter
    );
  }
  f = message.getGrantee();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cs3_storageprovider_v0alpha_resources_pb.Grantee.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCtime();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      cs3_types_types_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMtime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      cs3_types_types_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShareId id = 1;
 * @return {?proto.cs3.ocmshareproviderv0alpha.ShareId}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getId = function() {
  return /** @type{?proto.cs3.ocmshareproviderv0alpha.ShareId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.ocmshareproviderv0alpha.ShareId, 1));
};


/** @param {?proto.cs3.ocmshareproviderv0alpha.ShareId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.storageproviderv0alpha.ResourceId resource_id = 2;
 * @return {?proto.cs3.storageproviderv0alpha.ResourceId}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourceId} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourceId, 2));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourceId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setResourceId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearResourceId = function() {
  this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SharePermissions permissions = 3;
 * @return {?proto.cs3.ocmshareproviderv0alpha.SharePermissions}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.ocmshareproviderv0alpha.SharePermissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.ocmshareproviderv0alpha.SharePermissions, 3));
};


/** @param {?proto.cs3.ocmshareproviderv0alpha.SharePermissions|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.storageproviderv0alpha.Grantee grantee = 4;
 * @return {?proto.cs3.storageproviderv0alpha.Grantee}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getGrantee = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.Grantee} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.Grantee, 4));
};


/** @param {?proto.cs3.storageproviderv0alpha.Grantee|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setGrantee = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearGrantee = function() {
  this.setGrantee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasGrantee = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.types.UserId owner = 5;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getOwner = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 5));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional cs3.types.UserId creator = 6;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getCreator = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 6));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setCreator = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearCreator = function() {
  this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional cs3.types.Timestamp ctime = 7;
 * @return {?proto.cs3.types.Timestamp}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getCtime = function() {
  return /** @type{?proto.cs3.types.Timestamp} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Timestamp, 7));
};


/** @param {?proto.cs3.types.Timestamp|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setCtime = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearCtime = function() {
  this.setCtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasCtime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional cs3.types.Timestamp mtime = 8;
 * @return {?proto.cs3.types.Timestamp}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.getMtime = function() {
  return /** @type{?proto.cs3.types.Timestamp} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Timestamp, 8));
};


/** @param {?proto.cs3.types.Timestamp|undefined} value */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.setMtime = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.clearMtime = function() {
  this.setMtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.Share.prototype.hasMtime = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.SharePermissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.SharePermissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissions: (f = msg.getPermissions()) && cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions.toObject(includeInstance, f),
    reshare: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.SharePermissions}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.SharePermissions;
  return proto.cs3.ocmshareproviderv0alpha.SharePermissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.SharePermissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.SharePermissions}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReshare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.SharePermissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.SharePermissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions.serializeBinaryToWriter
    );
  }
  f = message.getReshare();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional cs3.storageproviderv0alpha.ResourcePermissions permissions = 1;
 * @return {?proto.cs3.storageproviderv0alpha.ResourcePermissions}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourcePermissions} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions, 1));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourcePermissions|undefined} value */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool reshare = 2;
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.getReshare = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.cs3.ocmshareproviderv0alpha.SharePermissions.prototype.setReshare = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.ReceivedShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.ReceivedShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    share: (f = msg.getShare()) && proto.cs3.ocmshareproviderv0alpha.Share.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ReceivedShare}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.ReceivedShare;
  return proto.cs3.ocmshareproviderv0alpha.ReceivedShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ReceivedShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ReceivedShare}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.ocmshareproviderv0alpha.Share;
      reader.readMessage(value,proto.cs3.ocmshareproviderv0alpha.Share.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    case 2:
      var value = /** @type {!proto.cs3.ocmshareproviderv0alpha.ShareState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.ReceivedShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ReceivedShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.ocmshareproviderv0alpha.Share.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Share share = 1;
 * @return {?proto.cs3.ocmshareproviderv0alpha.Share}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.getShare = function() {
  return /** @type{?proto.cs3.ocmshareproviderv0alpha.Share} */ (
    jspb.Message.getWrapperField(this, proto.cs3.ocmshareproviderv0alpha.Share, 1));
};


/** @param {?proto.cs3.ocmshareproviderv0alpha.Share|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.setShare = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.clearShare = function() {
  this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.hasShare = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareState state = 2;
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareState}
 */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.getState = function() {
  return /** @type {!proto.cs3.ocmshareproviderv0alpha.ShareState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.cs3.ocmshareproviderv0alpha.ShareState} value */
proto.cs3.ocmshareproviderv0alpha.ReceivedShare.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.ShareKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = msg.getOwner()) && cs3_types_types_pb.UserId.toObject(includeInstance, f),
    resourceId: (f = msg.getResourceId()) && cs3_storageprovider_v0alpha_resources_pb.ResourceId.toObject(includeInstance, f),
    grantee: (f = msg.getGrantee()) && cs3_storageprovider_v0alpha_resources_pb.Grantee.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareKey}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.ShareKey;
  return proto.cs3.ocmshareproviderv0alpha.ShareKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareKey}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 3:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourceId;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 4:
      var value = new cs3_storageprovider_v0alpha_resources_pb.Grantee;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.Grantee.deserializeBinaryFromReader);
      msg.setGrantee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.ShareKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getGrantee();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cs3_storageprovider_v0alpha_resources_pb.Grantee.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.UserId owner = 2;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.getOwner = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 2));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional cs3.storageproviderv0alpha.ResourceId resource_id = 3;
 * @return {?proto.cs3.storageproviderv0alpha.ResourceId}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourceId} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourceId, 3));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourceId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.setResourceId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.clearResourceId = function() {
  this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.storageproviderv0alpha.Grantee grantee = 4;
 * @return {?proto.cs3.storageproviderv0alpha.Grantee}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.getGrantee = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.Grantee} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.Grantee, 4));
};


/** @param {?proto.cs3.storageproviderv0alpha.Grantee|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.setGrantee = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.clearGrantee = function() {
  this.setGrantee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareKey.prototype.hasGrantee = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.ShareId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaqueId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareId}
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.ShareId;
  return proto.cs3.ocmshareproviderv0alpha.ShareId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareId}
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpaqueId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.ShareId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaqueId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string opaque_id = 2;
 * @return {string}
 */
proto.cs3.ocmshareproviderv0alpha.ShareId.prototype.getOpaqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.ocmshareproviderv0alpha.ShareId.prototype.setOpaqueId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.SpecCase = {
  SPEC_NOT_SET: 0,
  ID: 1,
  KEY: 2
};

/**
 * @return {proto.cs3.ocmshareproviderv0alpha.ShareReference.SpecCase}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.getSpecCase = function() {
  return /** @type {proto.cs3.ocmshareproviderv0alpha.ShareReference.SpecCase} */(jspb.Message.computeOneofCase(this, proto.cs3.ocmshareproviderv0alpha.ShareReference.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.ShareReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.cs3.ocmshareproviderv0alpha.ShareId.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.cs3.ocmshareproviderv0alpha.ShareKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareReference}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.ShareReference;
  return proto.cs3.ocmshareproviderv0alpha.ShareReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareReference}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.ocmshareproviderv0alpha.ShareId;
      reader.readMessage(value,proto.cs3.ocmshareproviderv0alpha.ShareId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.cs3.ocmshareproviderv0alpha.ShareKey;
      reader.readMessage(value,proto.cs3.ocmshareproviderv0alpha.ShareKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.ShareReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.ocmshareproviderv0alpha.ShareId.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cs3.ocmshareproviderv0alpha.ShareKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShareId id = 1;
 * @return {?proto.cs3.ocmshareproviderv0alpha.ShareId}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.getId = function() {
  return /** @type{?proto.cs3.ocmshareproviderv0alpha.ShareId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.ocmshareproviderv0alpha.ShareId, 1));
};


/** @param {?proto.cs3.ocmshareproviderv0alpha.ShareId|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.setId = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.cs3.ocmshareproviderv0alpha.ShareReference.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareKey key = 2;
 * @return {?proto.cs3.ocmshareproviderv0alpha.ShareKey}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.getKey = function() {
  return /** @type{?proto.cs3.ocmshareproviderv0alpha.ShareKey} */ (
    jspb.Message.getWrapperField(this, proto.cs3.ocmshareproviderv0alpha.ShareKey, 2));
};


/** @param {?proto.cs3.ocmshareproviderv0alpha.ShareKey|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.setKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.cs3.ocmshareproviderv0alpha.ShareReference.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareReference.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.ocmshareproviderv0alpha.ShareGrant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareGrant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.toObject = function(includeInstance, msg) {
  var f, obj = {
    grantee: (f = msg.getGrantee()) && cs3_storageprovider_v0alpha_resources_pb.Grantee.toObject(includeInstance, f),
    permissions: (f = msg.getPermissions()) && proto.cs3.ocmshareproviderv0alpha.SharePermissions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareGrant}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.ocmshareproviderv0alpha.ShareGrant;
  return proto.cs3.ocmshareproviderv0alpha.ShareGrant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareGrant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.ocmshareproviderv0alpha.ShareGrant}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_storageprovider_v0alpha_resources_pb.Grantee;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.Grantee.deserializeBinaryFromReader);
      msg.setGrantee(value);
      break;
    case 2:
      var value = new proto.cs3.ocmshareproviderv0alpha.SharePermissions;
      reader.readMessage(value,proto.cs3.ocmshareproviderv0alpha.SharePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.ocmshareproviderv0alpha.ShareGrant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.ocmshareproviderv0alpha.ShareGrant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGrantee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_storageprovider_v0alpha_resources_pb.Grantee.serializeBinaryToWriter
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.cs3.ocmshareproviderv0alpha.SharePermissions.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.storageproviderv0alpha.Grantee grantee = 1;
 * @return {?proto.cs3.storageproviderv0alpha.Grantee}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.getGrantee = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.Grantee} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.Grantee, 1));
};


/** @param {?proto.cs3.storageproviderv0alpha.Grantee|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.setGrantee = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.clearGrantee = function() {
  this.setGrantee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.hasGrantee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SharePermissions permissions = 2;
 * @return {?proto.cs3.ocmshareproviderv0alpha.SharePermissions}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.ocmshareproviderv0alpha.SharePermissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.ocmshareproviderv0alpha.SharePermissions, 2));
};


/** @param {?proto.cs3.ocmshareproviderv0alpha.SharePermissions|undefined} value */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.ocmshareproviderv0alpha.ShareGrant.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.cs3.ocmshareproviderv0alpha.ShareState = {
  SHARE_STATE_INVALID: 0,
  SHARE_STATE_PENDING: 1,
  SHARE_STATE_ACCEPTED: 2,
  SHARE_STATE_REJECTED: 3
};

goog.object.extend(exports, proto.cs3.ocmshareproviderv0alpha);
