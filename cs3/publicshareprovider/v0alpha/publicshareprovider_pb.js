// source: cs3/publicshareprovider/v0alpha/publicshareprovider.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cs3_publicshareprovider_v0alpha_resources_pb = require('../../../cs3/publicshareprovider/v0alpha/resources_pb.js');
goog.object.extend(proto, cs3_publicshareprovider_v0alpha_resources_pb);
var cs3_rpc_status_pb = require('../../../cs3/rpc/status_pb.js');
goog.object.extend(proto, cs3_rpc_status_pb);
var cs3_storageprovider_v0alpha_resources_pb = require('../../../cs3/storageprovider/v0alpha/resources_pb.js');
goog.object.extend(proto, cs3_storageprovider_v0alpha_resources_pb);
var cs3_types_types_pb = require('../../../cs3/types/types_pb.js');
goog.object.extend(proto, cs3_types_types_pb);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.Grant', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.TermCase', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.Type', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.Type', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.displayName = 'proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.Grant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.Grant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.Grant.displayName = 'proto.cs3.publicshareproviderv0alpha.Grant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.displayName = 'proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.displayName = 'proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.displayName = 'proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.displayName = 'proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.repeatedFields_, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.displayName = 'proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.oneofGroups_);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.displayName = 'proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.repeatedFields_, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.displayName = 'proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.displayName = 'proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.displayName = 'proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.displayName = 'proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.displayName = 'proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.displayName = 'proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.displayName = 'proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    resourceInfo: (f = msg.getResourceInfo()) && cs3_storageprovider_v0alpha_resources_pb.ResourceInfo.toObject(includeInstance, f),
    grant: (f = msg.getGrant()) && proto.cs3.publicshareproviderv0alpha.Grant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest;
  return proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourceInfo;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourceInfo.deserializeBinaryFromReader);
      msg.setResourceInfo(value);
      break;
    case 3:
      var value = new proto.cs3.publicshareproviderv0alpha.Grant;
      reader.readMessage(value,proto.cs3.publicshareproviderv0alpha.Grant.deserializeBinaryFromReader);
      msg.setGrant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getResourceInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourceInfo.serializeBinaryToWriter
    );
  }
  f = message.getGrant();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.cs3.publicshareproviderv0alpha.Grant.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.Opaque opaque = 1;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 1));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.storageproviderv0alpha.ResourceInfo resource_info = 2;
 * @return {?proto.cs3.storageproviderv0alpha.ResourceInfo}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.getResourceInfo = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourceInfo} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourceInfo, 2));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourceInfo|undefined} value */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.setResourceInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.clearResourceInfo = function() {
  this.setResourceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.hasResourceInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Grant grant = 3;
 * @return {?proto.cs3.publicshareproviderv0alpha.Grant}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.getGrant = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.Grant} */ (
    jspb.Message.getWrapperField(this, proto.cs3.publicshareproviderv0alpha.Grant, 3));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.Grant|undefined} value */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.setGrant = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.clearGrant = function() {
  this.setGrant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareRequest.prototype.hasGrant = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.Grant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.Grant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.Grant.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissions: (f = msg.getPermissions()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicSharePermissions.toObject(includeInstance, f),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expiration: (f = msg.getExpiration()) && cs3_types_types_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.Grant}
 */
proto.cs3.publicshareproviderv0alpha.Grant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.Grant;
  return proto.cs3.publicshareproviderv0alpha.Grant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.Grant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.Grant}
 */
proto.cs3.publicshareproviderv0alpha.Grant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicSharePermissions;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicSharePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = new cs3_types_types_pb.Timestamp;
      reader.readMessage(value,cs3_types_types_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.Grant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.Grant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.Grant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicSharePermissions.serializeBinaryToWriter
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_types_types_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicSharePermissions permissions = 1;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicSharePermissions}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicSharePermissions} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicSharePermissions, 1));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicSharePermissions|undefined} value */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional cs3.types.Timestamp expiration = 3;
 * @return {?proto.cs3.types.Timestamp}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.getExpiration = function() {
  return /** @type{?proto.cs3.types.Timestamp} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Timestamp, 3));
};


/** @param {?proto.cs3.types.Timestamp|undefined} value */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.Grant.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse;
  return proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.Opaque opaque = 2;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 2));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublicShare share = 3;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShare, 3));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShare|undefined} value */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.setShare = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.clearShare = function() {
  this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.CreatePublicShareResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest;
  return proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    grant: (f = msg.getGrant()) && proto.cs3.publicshareproviderv0alpha.Grant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update;
  return proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.cs3.publicshareproviderv0alpha.Grant;
      reader.readMessage(value,proto.cs3.publicshareproviderv0alpha.Grant.deserializeBinaryFromReader);
      msg.setGrant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getGrant();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cs3.publicshareproviderv0alpha.Grant.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.Type = {
  UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_INVALID: 0,
  UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PERMISSIONS: 1,
  UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_PASSWORD: 2,
  UPDATE_PUBLIC_SHARE_REQUEST_UPDATE_TYPE_EXPIRATION: 3
};

/**
 * optional Type type = 3;
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.Type}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.getType = function() {
  return /** @type {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.Type} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.Type} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Grant grant = 4;
 * @return {?proto.cs3.publicshareproviderv0alpha.Grant}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.getGrant = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.Grant} */ (
    jspb.Message.getWrapperField(this, proto.cs3.publicshareproviderv0alpha.Grant, 4));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.Grant|undefined} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.setGrant = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.clearGrant = function() {
  this.setGrant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.Update.prototype.hasGrant = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.types.Opaque opaque = 1;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 1));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShareReference ref = 2;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShareReference}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference, 2));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShareReference|undefined} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse;
  return proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.Opaque opaque = 2;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 2));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublicShare share = 3;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShare, 3));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShare|undefined} value */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.setShare = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.clearShare = function() {
  this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.UpdatePublicShareResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest;
  return proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter;
      reader.readMessage(value,proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.serializeBinaryToWriter
    );
  }
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.oneofGroups_ = [[3,4,5]];

/**
 * @enum {number}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.TermCase = {
  TERM_NOT_SET: 0,
  RESOURCE_ID: 3,
  OWNER: 4,
  CREATOR: 5
};

/**
 * @return {proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.TermCase}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.getTermCase = function() {
  return /** @type {proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.TermCase} */(jspb.Message.computeOneofCase(this, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resourceId: (f = msg.getResourceId()) && cs3_storageprovider_v0alpha_resources_pb.ResourceId.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && cs3_types_types_pb.UserId.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && cs3_types_types_pb.UserId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter;
  return proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourceId;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 4:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 5:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.Type = {
  LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_INVALID: 0,
  LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_RESOURCE_ID: 1,
  LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_OWNER: 2,
  LIST_PUBLIC_SHARES_REQUEST_FILTER_TYPE_CREATOR: 3
};

/**
 * optional Type type = 2;
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.Type}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.getType = function() {
  return /** @type {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.Type} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional cs3.storageproviderv0alpha.ResourceId resource_id = 3;
 * @return {?proto.cs3.storageproviderv0alpha.ResourceId}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourceId} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourceId, 3));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourceId|undefined} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.setResourceId = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.clearResourceId = function() {
  this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cs3.types.UserId owner = 4;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.getOwner = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 4));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.setOwner = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.types.UserId creator = 5;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.getCreator = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 5));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.setCreator = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.clearCreator = function() {
  this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional cs3.types.Opaque opaque = 1;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 1));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Filter filters = 2;
 * @return {!Array<!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter>}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter, 2));
};


/** @param {!Array<!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter>} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.setFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesRequest.prototype.clearFiltersList = function() {
  this.setFiltersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    shareList: jspb.Message.toObjectList(msg.getShareList(),
    cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse;
  return proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.addShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShareList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.Opaque opaque = 2;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 2));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PublicShare share = 3;
 * @return {!Array<!proto.cs3.publicshareproviderv0alpha.PublicShare>}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.getShareList = function() {
  return /** @type{!Array<!proto.cs3.publicshareproviderv0alpha.PublicShare>} */ (
    jspb.Message.getRepeatedWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShare, 3));
};


/** @param {!Array<!proto.cs3.publicshareproviderv0alpha.PublicShare>} value */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.setShareList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShare=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.addShare = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.cs3.publicshareproviderv0alpha.PublicShare, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.cs3.publicshareproviderv0alpha.ListPublicSharesResponse.prototype.clearShareList = function() {
  this.setShareList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest;
  return proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.Opaque opaque = 1;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 1));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShareReference ref = 2;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShareReference}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference, 2));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShareReference|undefined} value */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse;
  return proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.Opaque opaque = 2;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 2));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.RemovePublicShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest;
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.types.Opaque opaque = 1;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 1));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicShareReference ref = 2;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShareReference}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.getRef = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShareReference} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShareReference, 2));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShareReference|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareRequest.prototype.hasRef = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse;
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.Opaque opaque = 2;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 2));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublicShare share = 3;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShare, 3));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShare|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.setShare = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.clearShare = function() {
  this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest;
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional cs3.types.Opaque opaque = 1;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 1));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && cs3_rpc_status_pb.Status.toObject(includeInstance, f),
    opaque: (f = msg.getOpaque()) && cs3_types_types_pb.Opaque.toObject(includeInstance, f),
    share: (f = msg.getShare()) && cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse;
  return proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_rpc_status_pb.Status;
      reader.readMessage(value,cs3_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new cs3_types_types_pb.Opaque;
      reader.readMessage(value,cs3_types_types_pb.Opaque.deserializeBinaryFromReader);
      msg.setOpaque(value);
      break;
    case 3:
      var value = new cs3_publicshareprovider_v0alpha_resources_pb.PublicShare;
      reader.readMessage(value,cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.deserializeBinaryFromReader);
      msg.setShare(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getOpaque();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cs3_types_types_pb.Opaque.serializeBinaryToWriter
    );
  }
  f = message.getShare();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_publicshareprovider_v0alpha_resources_pb.PublicShare.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.rpc.Status status = 1;
 * @return {?proto.cs3.rpc.Status}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.getStatus = function() {
  return /** @type{?proto.cs3.rpc.Status} */ (
    jspb.Message.getWrapperField(this, cs3_rpc_status_pb.Status, 1));
};


/** @param {?proto.cs3.rpc.Status|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.clearStatus = function() {
  this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cs3.types.Opaque opaque = 2;
 * @return {?proto.cs3.types.Opaque}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.getOpaque = function() {
  return /** @type{?proto.cs3.types.Opaque} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Opaque, 2));
};


/** @param {?proto.cs3.types.Opaque|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.setOpaque = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.clearOpaque = function() {
  this.setOpaque(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.hasOpaque = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublicShare share = 3;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.getShare = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShare} */ (
    jspb.Message.getWrapperField(this, cs3_publicshareprovider_v0alpha_resources_pb.PublicShare, 3));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShare|undefined} value */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.setShare = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.clearShare = function() {
  this.setShare(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.GetPublicShareByTokenResponse.prototype.hasShare = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.cs3.publicshareproviderv0alpha);
