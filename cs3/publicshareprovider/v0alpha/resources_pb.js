// source: cs3/publicshareprovider/v0alpha/resources.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cs3_storageprovider_v0alpha_resources_pb = require('../../../cs3/storageprovider/v0alpha/resources_pb.js');
goog.object.extend(proto, cs3_storageprovider_v0alpha_resources_pb);
var cs3_types_types_pb = require('../../../cs3/types/types_pb.js');
goog.object.extend(proto, cs3_types_types_pb);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.PublicShare', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.PublicShareId', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.PublicSharePermissions', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.PublicShareReference', null, global);
goog.exportSymbol('proto.cs3.publicshareproviderv0alpha.PublicShareReference.SpecCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.PublicShare = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.PublicShare, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.PublicShare.displayName = 'proto.cs3.publicshareproviderv0alpha.PublicShare';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.PublicSharePermissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.displayName = 'proto.cs3.publicshareproviderv0alpha.PublicSharePermissions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.PublicShareId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.PublicShareId.displayName = 'proto.cs3.publicshareproviderv0alpha.PublicShareId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cs3.publicshareproviderv0alpha.PublicShareReference.oneofGroups_);
};
goog.inherits(proto.cs3.publicshareproviderv0alpha.PublicShareReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cs3.publicshareproviderv0alpha.PublicShareReference.displayName = 'proto.cs3.publicshareproviderv0alpha.PublicShareReference';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.PublicShare.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShare} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.cs3.publicshareproviderv0alpha.PublicShareId.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resourceId: (f = msg.getResourceId()) && cs3_storageprovider_v0alpha_resources_pb.ResourceId.toObject(includeInstance, f),
    permissions: (f = msg.getPermissions()) && proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.toObject(includeInstance, f),
    owner: (f = msg.getOwner()) && cs3_types_types_pb.UserId.toObject(includeInstance, f),
    creator: (f = msg.getCreator()) && cs3_types_types_pb.UserId.toObject(includeInstance, f),
    ctime: (f = msg.getCtime()) && cs3_types_types_pb.Timestamp.toObject(includeInstance, f),
    mtime: (f = msg.getMtime()) && cs3_types_types_pb.Timestamp.toObject(includeInstance, f),
    passwordProtected: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    expiration: (f = msg.getExpiration()) && cs3_types_types_pb.Timestamp.toObject(includeInstance, f),
    displayName: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.PublicShare;
  return proto.cs3.publicshareproviderv0alpha.PublicShare.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShare} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShare}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.publicshareproviderv0alpha.PublicShareId;
      reader.readMessage(value,proto.cs3.publicshareproviderv0alpha.PublicShareId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourceId;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourceId.deserializeBinaryFromReader);
      msg.setResourceId(value);
      break;
    case 4:
      var value = new proto.cs3.publicshareproviderv0alpha.PublicSharePermissions;
      reader.readMessage(value,proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    case 5:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 6:
      var value = new cs3_types_types_pb.UserId;
      reader.readMessage(value,cs3_types_types_pb.UserId.deserializeBinaryFromReader);
      msg.setCreator(value);
      break;
    case 7:
      var value = new cs3_types_types_pb.Timestamp;
      reader.readMessage(value,cs3_types_types_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCtime(value);
      break;
    case 8:
      var value = new cs3_types_types_pb.Timestamp;
      reader.readMessage(value,cs3_types_types_pb.Timestamp.deserializeBinaryFromReader);
      msg.setMtime(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPasswordProtected(value);
      break;
    case 10:
      var value = new cs3_types_types_pb.Timestamp;
      reader.readMessage(value,cs3_types_types_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiration(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.PublicShare.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShare} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.publicshareproviderv0alpha.PublicShareId.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResourceId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.serializeBinaryToWriter
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCreator();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      cs3_types_types_pb.UserId.serializeBinaryToWriter
    );
  }
  f = message.getCtime();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      cs3_types_types_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMtime();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      cs3_types_types_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPasswordProtected();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getExpiration();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      cs3_types_types_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional PublicShareId id = 1;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShareId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getId = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShareId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.publicshareproviderv0alpha.PublicShareId, 1));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShareId|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional cs3.storageproviderv0alpha.ResourceId resource_id = 3;
 * @return {?proto.cs3.storageproviderv0alpha.ResourceId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getResourceId = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourceId} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourceId, 3));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourceId|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setResourceId = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearResourceId = function() {
  this.setResourceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasResourceId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PublicSharePermissions permissions = 4;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicSharePermissions}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicSharePermissions} */ (
    jspb.Message.getWrapperField(this, proto.cs3.publicshareproviderv0alpha.PublicSharePermissions, 4));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicSharePermissions|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional cs3.types.UserId owner = 5;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getOwner = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 5));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setOwner = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearOwner = function() {
  this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional cs3.types.UserId creator = 6;
 * @return {?proto.cs3.types.UserId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getCreator = function() {
  return /** @type{?proto.cs3.types.UserId} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.UserId, 6));
};


/** @param {?proto.cs3.types.UserId|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setCreator = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearCreator = function() {
  this.setCreator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional cs3.types.Timestamp ctime = 7;
 * @return {?proto.cs3.types.Timestamp}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getCtime = function() {
  return /** @type{?proto.cs3.types.Timestamp} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Timestamp, 7));
};


/** @param {?proto.cs3.types.Timestamp|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setCtime = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearCtime = function() {
  this.setCtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasCtime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional cs3.types.Timestamp mtime = 8;
 * @return {?proto.cs3.types.Timestamp}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getMtime = function() {
  return /** @type{?proto.cs3.types.Timestamp} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Timestamp, 8));
};


/** @param {?proto.cs3.types.Timestamp|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setMtime = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearMtime = function() {
  this.setMtime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasMtime = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool password_protected = 9;
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getPasswordProtected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setPasswordProtected = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional cs3.types.Timestamp expiration = 10;
 * @return {?proto.cs3.types.Timestamp}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getExpiration = function() {
  return /** @type{?proto.cs3.types.Timestamp} */ (
    jspb.Message.getWrapperField(this, cs3_types_types_pb.Timestamp, 10));
};


/** @param {?proto.cs3.types.Timestamp|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setExpiration = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.clearExpiration = function() {
  this.setExpiration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string display_name = 11;
 * @return {string}
 */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.cs3.publicshareproviderv0alpha.PublicShare.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicSharePermissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissions: (f = msg.getPermissions()) && cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicSharePermissions}
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.PublicSharePermissions;
  return proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicSharePermissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicSharePermissions}
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions;
      reader.readMessage(value,cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicSharePermissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions.serializeBinaryToWriter
    );
  }
};


/**
 * optional cs3.storageproviderv0alpha.ResourcePermissions permissions = 1;
 * @return {?proto.cs3.storageproviderv0alpha.ResourcePermissions}
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.prototype.getPermissions = function() {
  return /** @type{?proto.cs3.storageproviderv0alpha.ResourcePermissions} */ (
    jspb.Message.getWrapperField(this, cs3_storageprovider_v0alpha_resources_pb.ResourcePermissions, 1));
};


/** @param {?proto.cs3.storageproviderv0alpha.ResourcePermissions|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicSharePermissions.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.PublicShareId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShareId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.toObject = function(includeInstance, msg) {
  var f, obj = {
    opaqueId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShareId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.PublicShareId;
  return proto.cs3.publicshareproviderv0alpha.PublicShareId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShareId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShareId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpaqueId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.PublicShareId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShareId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpaqueId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string opaque_id = 2;
 * @return {string}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareId.prototype.getOpaqueId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.publicshareproviderv0alpha.PublicShareId.prototype.setOpaqueId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.SpecCase = {
  SPEC_NOT_SET: 0,
  ID: 1,
  TOKEN: 2
};

/**
 * @return {proto.cs3.publicshareproviderv0alpha.PublicShareReference.SpecCase}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.getSpecCase = function() {
  return /** @type {proto.cs3.publicshareproviderv0alpha.PublicShareReference.SpecCase} */(jspb.Message.computeOneofCase(this, proto.cs3.publicshareproviderv0alpha.PublicShareReference.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.toObject = function(opt_includeInstance) {
  return proto.cs3.publicshareproviderv0alpha.PublicShareReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShareReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.cs3.publicshareproviderv0alpha.PublicShareId.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShareReference}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cs3.publicshareproviderv0alpha.PublicShareReference;
  return proto.cs3.publicshareproviderv0alpha.PublicShareReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShareReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cs3.publicshareproviderv0alpha.PublicShareReference}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.cs3.publicshareproviderv0alpha.PublicShareId;
      reader.readMessage(value,proto.cs3.publicshareproviderv0alpha.PublicShareId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cs3.publicshareproviderv0alpha.PublicShareReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cs3.publicshareproviderv0alpha.PublicShareReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.cs3.publicshareproviderv0alpha.PublicShareId.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional PublicShareId id = 1;
 * @return {?proto.cs3.publicshareproviderv0alpha.PublicShareId}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.getId = function() {
  return /** @type{?proto.cs3.publicshareproviderv0alpha.PublicShareId} */ (
    jspb.Message.getWrapperField(this, proto.cs3.publicshareproviderv0alpha.PublicShareId, 1));
};


/** @param {?proto.cs3.publicshareproviderv0alpha.PublicShareId|undefined} value */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.setId = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.cs3.publicshareproviderv0alpha.PublicShareReference.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.clearId = function() {
  this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.setToken = function(value) {
  jspb.Message.setOneofField(this, 2, proto.cs3.publicshareproviderv0alpha.PublicShareReference.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.clearToken = function() {
  jspb.Message.setOneofField(this, 2, proto.cs3.publicshareproviderv0alpha.PublicShareReference.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cs3.publicshareproviderv0alpha.PublicShareReference.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.cs3.publicshareproviderv0alpha);
